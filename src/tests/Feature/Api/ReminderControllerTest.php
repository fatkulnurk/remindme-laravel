<?php

namespace Tests\Feature\Api;

use App\Enums\Errors\CommonError;
use App\Models\Reminder;
use PHPUnit\Framework\Attributes\DataProvider;
use Tests\TestCase;

/**
 * @package Tests\Feature\Api
 * @author  Fatkul Nur Koirudin <https://github.com/fatkulnurk>
 * */
class ReminderControllerTest extends TestCase
{
    private array $defaultCredential = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->defaultCredential = [
            'email' => 'alice@mail.com',
            'password' => '123456'
        ];
    }

    public static function additionalProvider(): array
    {
        return [
            [
                [
                    'title' => 'Memancing Ikan - fatkul nur koirudin',
                    'description' => 'memancing ikan di sungai belakang rumah',
                    'remind_at' => '1702311229',
                    'event_at' => '1822310229'
                ]
            ],
            [
                [
                    'title' => 'Ternak Ikan - fatkul nur koirudin',
                    'description' => 'ternak ikan di sungai belakang rumah',
                    'remind_at' => '1702319229',
                    'event_at' => '1822310229'
                ]
            ],
            [
                [
                    'title' => 'Makan Ikan - fatkul nur koirudin',
                    'description' => 'makan ikan di sungai belakang rumah',
                    'remind_at' => '1701311229',
                    'event_at' => '1722310229'
                ]
            ]
        ];
    }

    public function test_get_reminders_passed(): void
    {
        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->get(uri: '/api/reminders', headers: [
            'Authorization' => 'Bearer ' . $accessToken,
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        ]);
        $data = $response->json();

        $response->assertStatus(200);
        $this->assertIsArray($data);
        $this->assertTrue($data['ok']);
        $this->assertArrayHasKey('data', $data);
    }

    public function test_get_reminders_failed(): void
    {
        $error = CommonError::ERR_INVALID_ACCESS_TOKEN;
        $accessToken = 'fatkulnurk';
        $response = $this->get(uri: '/api/reminders', headers: [
            'Authorization' => 'Bearer ' . $accessToken,
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        ]);
        $data = $response->json();

        $response->assertStatus($error->httpStatusCode());

        $this->assertIsArray($data);
        $this->assertArrayHasKey('ok', $data);
        $this->assertArrayHasKey('err', $data);
        $this->assertArrayHasKey('msg', $data);

        $this->assertFalse($data['ok']);
        $this->assertEquals($error->value, $data['err']);
        $this->assertEquals($error->message(), $data['msg']);

        $this->assertEquals($error->toMap(), $data);
    }

    #[DataProvider('additionalProvider')]
    public function test_create_reminder_passed($data)
    {
        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->post(uri: '/api/reminders', data: $data, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
        ]);
        $responseData = $response->json();

        $response->assertStatus(200);
        $this->assertIsArray($responseData);
        $this->assertTrue($responseData['ok']);
        $this->assertArrayHasKey('data', $responseData);
        $this->assertArrayHasKey('id', $responseData['data']);
        $this->assertArrayHasKey('title', $responseData['data']);
        $this->assertArrayHasKey('description', $responseData['data']);
        $this->assertArrayHasKey('remind_at', $responseData['data']);
        $this->assertArrayHasKey('event_at', $responseData['data']);
        $this->assertArrayNotHasKey('created_at', $response['data']);
        $this->assertArrayNotHasKey('updated_at', $response['data']);
        $this->assertArrayNotHasKey('deleted_at', $response['data']);

        $this->assertEquals($data['title'], $responseData['data']['title']);
        $this->assertEquals($data['description'], $responseData['data']['description']);
        $this->assertEquals($data['remind_at'], $responseData['data']['remind_at']);
        $this->assertEquals($data['event_at'], $responseData['data']['event_at']);
    }

    #[DataProvider('additionalProvider')]
    public function test_create_reminder_failed($data)
    {
        $error = CommonError::ERR_BAD_REQUEST;
        unset($data['title']);

        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->post(uri: '/api/reminders', data: $data, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        ]);
        $responseData = $response->json();

        $response->assertStatus($error->httpStatusCode());
        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('ok', $responseData);
        $this->assertArrayHasKey('err', $responseData);
        $this->assertArrayHasKey('msg', $responseData);

        $this->assertFalse($responseData['ok']);
        $this->assertEquals($error->value, $responseData['err']);
    }

    public function test_view_reminder_by_id_passed()
    {
        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $reminder = Reminder::query()->inRandomOrder()->first();
        $response = $this->get(uri: '/api/reminders/' . $reminder->getKey(), headers: [
            'Authorization' => 'Bearer ' . $accessToken,
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        ]);
        $responseData = $response->json();

        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('ok', $responseData);
        $this->assertArrayHasKey('id', $responseData['data']);
        $this->assertArrayHasKey('title', $responseData['data']);
        $this->assertArrayHasKey('description', $responseData['data']);
        $this->assertArrayHasKey('remind_at', $responseData['data']);
        $this->assertArrayHasKey('event_at', $responseData['data']);
        $this->assertArrayNotHasKey('remind_delivery_at', $responseData['data']);
        $this->assertArrayNotHasKey('created_at', $responseData['data']);
        $this->assertArrayNotHasKey('updated_at', $responseData['data']);
        $this->assertArrayNotHasKey('deleted_at', $responseData['data']);

        $this->assertTrue($responseData['ok']);
        $this->assertEquals($reminder->getKey(), $responseData['data']['id']);
    }

    public function test_view_reminder_by_id_failed()
    {
        $error = CommonError::ERR_NOT_FOUND;
        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $reminderKey = PHP_INT_MAX;
        $response = $this->get(uri: '/api/reminders/' . $reminderKey, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        ]);
        $responseData = $response->json();

        $response->assertStatus($error->httpStatusCode());

        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('ok', $responseData);
        $this->assertArrayHasKey('err', $responseData);
        $this->assertArrayHasKey('msg', $responseData);

        $this->assertFalse($responseData['ok']);
        $this->assertEquals($error->value, $responseData['err']);
    }

    #[DataProvider('additionalProvider')]
    public function test_update_reminder_passed($data)
    {
        $reminder = Reminder::query()->inRandomOrder()->first();
        $reminderKey = $reminder->getKey();

        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->put(uri: '/api/reminders/' . $reminderKey, data: $data, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
        ]);
        $responseData = $response->json();

        $response->assertStatus(200);
        $this->assertIsArray($responseData);
        $this->assertTrue($responseData['ok']);
        $this->assertArrayHasKey('data', $responseData);
        $this->assertArrayHasKey('id', $responseData['data']);
        $this->assertArrayHasKey('title', $responseData['data']);
        $this->assertArrayHasKey('description', $responseData['data']);
        $this->assertArrayHasKey('remind_at', $responseData['data']);
        $this->assertArrayHasKey('event_at', $responseData['data']);
        $this->assertArrayNotHasKey('created_at', $response['data']);
        $this->assertArrayNotHasKey('updated_at', $response['data']);
        $this->assertArrayNotHasKey('deleted_at', $response['data']);

        $this->assertEquals($reminderKey, $responseData['data']['id']);
        $this->assertEquals($data['title'], $responseData['data']['title']);
        $this->assertEquals($data['description'], $responseData['data']['description']);
        $this->assertEquals($data['remind_at'], $responseData['data']['remind_at']);
        $this->assertEquals($data['event_at'], $responseData['data']['event_at']);
    }

    #[DataProvider('additionalProvider')]
    public function test_update_reminder_failed($data)
    {
        $error = CommonError::ERR_NOT_FOUND;
        $reminderKey = PHP_INT_MAX;

        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->put(uri: '/api/reminders/' . $reminderKey, data: $data, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
        ]);
        $responseData = $response->json();

        $response->assertStatus($error->httpStatusCode());

        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('ok', $responseData);
        $this->assertArrayHasKey('err', $responseData);
        $this->assertArrayHasKey('msg', $responseData);

        $this->assertFalse($responseData['ok']);
        $this->assertEquals($error->value, $responseData['err']);
    }

    public function test_delete_reminder_passed()
    {
        $reminder = Reminder::query()->inRandomOrder()->first();
        $reminderKey = $reminder->getKey();

        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->delete(uri: '/api/reminders/' . $reminderKey, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
        ]);
        $responseData = $response->json();

        $response->assertStatus(200);
        $this->assertIsArray($responseData);
        $this->assertTrue($responseData['ok']);
        $this->assertSoftDeleted($reminder);
    }

    public function test_delete_reminder_failed()
    {
        $error = CommonError::ERR_NOT_FOUND;
        $reminderKey = PHP_INT_MAX;

        $response = $this->post(uri: '/api/session', data: $this->defaultCredential);
        $responseData = $response->json();
        $accessToken = $responseData['data']['access_token'];

        $response = $this->delete(uri: '/api/reminders/' . $reminderKey, headers: [
            'Authorization' => 'Bearer ' . $accessToken,
        ]);

        $responseData = $response->json();

        $response->assertStatus($error->httpStatusCode());

        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('ok', $responseData);
        $this->assertArrayHasKey('err', $responseData);
        $this->assertArrayHasKey('msg', $responseData);

        $this->assertFalse($responseData['ok']);
        $this->assertEquals($error->value, $responseData['err']);
    }
}
